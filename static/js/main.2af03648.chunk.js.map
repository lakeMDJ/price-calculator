{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["InputVertical","className","class","this","props","label","type","value","name","onChange","Component","InputRow","stateKey","PriceCalculator","onInputChange","event","console","warn","target","obj","Number","setState","localStorage","setItem","JSON","stringify","state","persistedState","getItem","parse","originalPrice","discount1","discount2","discount3","taxPercent","usShippingFee","shippingCostUnitPrice","shippingCostUnits","profitRate","exchangeRate","storePrice","totalCost","profit","profitInCNY","sellingPriceInCNY","toFixed","App","rel","href","integrity","crossorigin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2af03648.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\" />\n      <PriceCalculator />\n    </div>\n  );\n}\n\nclass InputVertical extends Component {\n  render() {\n    return (\n      <div className=\"form-group\">\n        <label class=\" col-form-label\">{this.props.label} </label>\n        <div >\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            value={this.props.value ? this.props.value : ''}\n            name={this.props.name}\n            onChange={this.props.onChange} />\n        </div>\n      </div>\n    )\n  }\n}\n\nclass InputRow extends Component {\n  render() {\n    return (\n      <div className=\"form-group row\">\n        <label class=\"col-5 col-form-label\">{this.props.label} </label>\n        <div class=\"col-7\">\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            value={this.props.value ? this.props.value : ''}\n            name={this.props.name}\n            onChange={this.props.onChange} />\n        </div>\n      </div>\n    )\n  }\n}\n\nconst stateKey = \"calculatorState\"\n\nclass PriceCalculator extends Component {\n  constructor(props) {\n    super(props)\n    const persistedState = localStorage.getItem(stateKey)\n    if (persistedState) {\n      this.state = JSON.parse(persistedState)\n    } else {\n    this.state = {\n      originalPrice: 0,\n      discount1: 1.0,\n      discount2: 1.0,\n      discount3: 1.0,\n      taxPercent: 0,\n      usShippingFee: 0,\n      shippingCostUnitPrice: 0,\n      shippingCostUnits: 0,\n      profitRate: 0,\n      exchangeRate: 7.0\n    }\n\n    }\n  }\n\n  onInputChange = (event) => {\n    console.warn(event.target.value)\n    console.warn(event.target.name)\n    const obj = {}\n    obj[event.target.name] = Number(event.target.value)\n    this.setState(obj, () => {\n      localStorage.setItem(stateKey, JSON.stringify(this.state))\n    })\n  }\n\n  render() {\n    const storePrice = this.state.originalPrice * this.state.discount1 * this.state.discount2 * this.state.discount3 * (1 + this.state.taxPercent / 100) + this.state.usShippingFee\n    const shippingCost = this.state.shippingCostUnitPrice * this.state.shippingCostUnits\n    const totalCost = storePrice + shippingCost\n    const profit = totalCost * (this.state.profitRate / 100)\n    const profitInCNY = profit * this.state.exchangeRate\n    const sellingPriceInCNY = (totalCost + profit) * this.state.exchangeRate\n    return (\n      <div className=\"container\">\n        <div className=\"row border-bottom\" >\n          <div className=\"col-7\">\n            <InputRow label=\"原价\" value={this.state.originalPrice} name=\"originalPrice\" onChange={this.onInputChange} />\n            <InputRow label=\"税率 %\" name=\"taxPercent\" value={this.state.taxPercent} onChange={this.onInputChange} />\n            <InputRow label=\"折扣1\" name=\"discount1\" value={this.state.discount1} onChange={this.onInputChange} />\n            <InputRow label=\"US运费\" name=\"usShippingFee\" value={this.state.usShippingFee} onChange={this.onInputChange} />\n          </div>\n          <div className=\"col-5\">\n            <h3 className=\"text-primary\"><h5>$</h5>{storePrice.toFixed(2)}</h3>\n            <div className=\"row\">\n              <div className=\"col-6\">\n            <InputVertical label=\"折扣2\" name=\"discount2\" value={this.state.discount2} onChange={this.onInputChange} />\n\n              </div>\n              <div className=\"col-6\">\n            <InputVertical label=\"折扣3\" name=\"discount3\" value={this.state.discount3} onChange={this.onInputChange} />\n\n              </div>\n\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-3\">\n            <InputVertical label=\"运费重量\" name=\"shippingCostUnits\" value={this.state.shippingCostUnits} onChange={this.onInputChange} />\n          </div>\n          <div className=\"col-3\">\n            <InputVertical label=\"运费单价\" name=\"shippingCostUnitPrice\" value={this.state.shippingCostUnitPrice} onChange={this.onInputChange} />\n          </div>\n          <div className=\"col-3\">\n            <InputVertical label=\"利润 %\" name=\"profitRate\" value={this.state.profitRate} onChange={this.onInputChange} />\n          </div>\n          <div className=\"col-3\">\n            <InputVertical label=\"汇率\" name=\"exchangeRate\" value={this.state.exchangeRate} onChange={this.onInputChange} />\n          </div>\n        </div>\n\n        <div className=\"col text-right\">\n          <h4 className=\"text-danger\">\n            卖价：￥{sellingPriceInCNY.toFixed(2)}\n          </h4>\n          <h6 className=\"text-success\">\n            你赚了：￥{profitInCNY.toFixed(2)}\n          </h6>\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}